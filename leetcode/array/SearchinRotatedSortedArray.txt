33. Search in Rotated Sorted Array

Suppose a sorted array is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.

public class Solution {
    public int search(int[] A, int target) {
        if(A.length < 1)
            return -1;
            
        int low = 0;
        int high = A.length - 1;
        
        while(low <= high){
            int mid = (low + high)/2;
            
            //if find, return
            if(target == A[mid]) return mid;
            
            //if left part is sorted
            if(A[mid] >= A[low]){
                if(target >= A[low] && target < A[mid]){
                    //if target is in the left part
                    high = mid - 1;
                }else{
                    //if target is in the right part
                    low = mid + 1;
                }
            }else{ //right part is sorted  
                if(target > A[mid] && target <= A[high]){
                    //if target is in the right part
                    low = mid + 1;
                }else{
                    //if target is in the left part
                    high = mid -1;
                }
            }
        }
        return -1;
    }
}