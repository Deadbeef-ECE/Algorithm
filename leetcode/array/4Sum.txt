18. 4Sum

Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note:
Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ≤ b ≤ c ≤ d)
The solution set must not contain duplicate quadruplets.
    For example, given array S = {1 0 -1 0 -2 2}, and target = 0.

    A solution set is:
    (-1,  0, 0, 1)
    (-2, -1, 1, 2)
    (-2,  0, 0, 2)

public class Solution {
    public List<List<Integer>> fourSum(int[] num, int target) {
        //Create a dictionary:
        //       int        3sum
        //        |           |
        HashMap<Integer, ArrayList<ArrayList<Integer>>> dict = new HashMap<>();
        //Deal with two numbers' sum and another pair of two numbers
        for(int i = 0; i < num.length - 1; i++){
            for(int j = i + 1; j < num.length; j++){
                //Add the first tow number's $#INDEX#$ in the inner Arraylist
                int sum = num[i] + num[j];
                ArrayList<Integer> innerPair = new ArrayList<>(2);
                innerPair.add(i);
                innerPair.add(j);
                if(!dict.containsKey(sum)){
                    //And the sum value in the outer ArrayList
                    ArrayList<ArrayList<Integer>> value = new ArrayList<>();
                    //innerPair is the inner ArrayList
                    value.add(innerPair);
                    //Put the Integer(sum) and ArrayList<ArrayList<Integer>>(value) in the HashMap
                    dict.put(sum, value);
                }else{
                    //And another pair with the same value
                    ArrayList<ArrayList<Integer>> value = dict.get(sum);
                    value.add(innerPair);
                }
            }
        }
        
        HashSet<ArrayList<Integer>> set = new HashSet<>();
        //Get each Integer sum in the HashMap one by one
        for(Integer sum : dict.keySet()){
            //And get the embedded ArrayList according to the key(Integer sum)
            ArrayList<ArrayList<Integer>> sumPair = dict.get(sum);
            //Find the other keypair in this HashMap
            if(dict.containsKey(target - sum)){
                //??
                if(target - sum == sum && sumPair.size() == 1)
                    continue;
                ArrayList<ArrayList<Integer>> remainPair = dict.get(target - sum);
                for(ArrayList<Integer> pair1 : sumPair){
                    for(ArrayList<Integer> pair2 : remainPair){
                        //avoid the same pair
                        if(pair1 == pair2)
                            continue;
                        //avoid the same element in these two pairs
                        if(pair1.contains(pair2.get(0)) || pair1.contains(pair2.get(1)))
                            continue;
                        
                        ArrayList<Integer> tmpRet = new ArrayList<>(4);
                        tmpRet.add(num[pair1.get(0)]);
                        tmpRet.add(num[pair1.get(1)]);
                        tmpRet.add(num[pair2.get(0)]);
                        tmpRet.add(num[pair2.get(1)]);

                        //sort the tmpRet
                        Collections.sort(tmpRet);
                        //add sorted tmpRet into HashSet to avoid duplicates
                        set.add(tmpRet);
                    }
                }
            }
        }
        List<List<Integer>> ret = new LinkedList<>();
        ret.addAll(set);
        return ret;
    }
}