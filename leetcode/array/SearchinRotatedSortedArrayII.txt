81. Search in Rotated Sorted Array II

Follow up for "Search in Rotated Sorted Array":
What if duplicates are allowed?

Would this affect the run-time complexity? How and why?

Write a function to determine if a given target is in the array.

public class Solution {
    public boolean search(int[] A, int target) {
        if(A.length < 1)
            return false;
        
        int low = 0;
        int high = A.length - 1;
        while(low <= high){
            int mid = (low + high)/2;
            
            if(A[mid] == target)
                return true;
            //if the left part is sorted
            if(A[mid] > A[low]){
                //if in the left part
                if(target <= A[mid] && target >= A[low]){
                    high = mid - 1;
                }else{ //in the right part
                    low = mid + 1;
                }
            }else if(A[mid] < A[low]){ //if the right part is sorted
                if(target >= A[mid] && target <= A[high]){
                    //if in the right part
                    low = mid + 1;
                }else{
                    //in the left part
                    high = mid - 1;
                }
            }else{
                low++;
            }
        }
        return false;
    }
}