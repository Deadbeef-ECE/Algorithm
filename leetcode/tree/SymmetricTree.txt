101. Symmetric Tree 

Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following is not:
    1
   / \
  2   2
   \   \
   3    3
Note:
Bonus points if you could solve it both recursively and iteratively.

Recursively:
public class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root == null)    return true;
        return isSymmetric(root.left, root.right);
    }
    
    public boolean isSymmetric(TreeNode left, TreeNode right){
        if(left == null)    return right==null;
        if(right == null)   return false;
        
        if(left.val != right.val)   return false;
        
        if(!isSymmetric(left.left, right.right)) return false;
        if(!isSymmetric(left.right, right.left)) return false;
        
        return true;
    }
}

Iteratively:
public class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root == null)    return true;
        
        LinkedList<TreeNode> left = new LinkedList<TreeNode>();
        LinkedList<TreeNode> right = new LinkedList<TreeNode>();
        left.add(root.left);
        right.add(root.right);
        while(!left.isEmpty() && !right.isEmpty()){
            TreeNode l = left.poll();
            TreeNode r = right.poll();
            if(l == null && r != null || l != null && r == null)
                return false;
            if(l != null){
                if(l.val != r.val)  return false;
                left.add(l.left);
                left.add(l.right);
                right.add(r.right);
                right.add(r.left);
            }
        }
        return true;
    }
}