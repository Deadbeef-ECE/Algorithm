106. Construct Binary Tree from Inorder and Postorder Traversal

Given inorder and postorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.

public class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        int inLen = inorder.length;
        int postLen = postorder.length;
        
        return buildTree(inorder, 0, inLen-1, postorder, 0, postLen-1);
    }
    
    public TreeNode buildTree(int[] in, int inStart, int inEnd, int[] post, int postStart, int postEnd){
        if(inStart > inEnd) return null;
        
        int rootval = post[postEnd];
        int rootIndex = 0;
        for(int i = 0; i <= inEnd; i++){
            if(in[i] == rootval){
                rootIndex = i;
                break;
            }
        }
        //get the length of left subtree
        int len = rootIndex - inStart;
        //build the root;
        TreeNode root = new TreeNode(rootval);
        root.left = buildTree(in, inStart, rootIndex-1, post, postStart, postStart+len-1);
        root.right = buildTree(in, rootIndex+1, inEnd, post, postStart+len, postEnd-1);
        return root;
    }
}