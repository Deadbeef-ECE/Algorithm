105. Construct Binary Tree from Preorder and Inorder Traversal

Given preorder and inorder traversal of a tree, construct the binary tree.

Note:
You may assume that duplicates do not exist in the tree.
===============================================================================
public class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        int preLen = preorder.length;
        int inLen = inorder.length;
        
        return buildTree(preorder, 0, preLen - 1, inorder, 0, inLen - 1);
    }
    
    public TreeNode buildTree(int[] pre, int preStart, int preEnd, int[] in, int inStart, int inEnd){
        if(inStart > inEnd) return null;
        int rootval = pre[preStart];
        int rootIndex = 0;
        
        //find the root in the inOrder array
        for(int i = inStart; i <= inEnd; i++){
            if(in[i] == rootval){
                rootIndex = i;
                break;
            }
        }
        
        //get length of left subtree 
        int len = rootIndex - inStart;
        TreeNode root = new TreeNode(rootval);
        //build left subtree recursively
        root.left = buildTree(pre, preStart+1, preStart+len, in, inStart, rootIndex-1);
        //build right subtree recursively
        root.right = buildTree(pre, preStart+len+1, preEnd, in, rootIndex+1,inEnd);
        
        return root;
    }
}