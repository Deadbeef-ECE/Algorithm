23. Merge k Sorted Lists

Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.


public class Solution {
    public ListNode mergeKLists(List<ListNode> lists) {
        if(lists.size() == 0)
            return null;
        return binaryMerge(lists, 0, lists.size() - 1);
    }
    
    public ListNode binaryMerge(List<ListNode> lists, int left, int right){
        if(left < right){
            int mid = (left + right)/2;
            return mergeTwoLists(binaryMerge(lists, left, mid), binaryMerge(lists, mid+1, right));
        }
        return lists.get(left);
    }
    
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        
        ListNode dummy = new ListNode(-1);
        ListNode curNode = dummy;
        while(l1 != null && l2 != null){
            if(l1.val > l2.val){
                curNode.next = l2;
                l2 = l2.next;
            }else{
                curNode.next = l1;
                l1 = l1.next;
            }
            curNode = curNode.next;
        }
        if(l1 != null) curNode.next = l1;
        else if(l2 != null) curNode.next = l2;
        return dummy.next;
    }
}