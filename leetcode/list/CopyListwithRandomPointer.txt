138. Copy List with Random Pointer 

A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.

/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    public RandomListNode copyRandomList(RandomListNode head) {
        RandomListNode cur = head;
        while(cur != null){
            RandomListNode tmp = new RandomListNode(cur.label);
            tmp.next = cur.next;
            cur.next = tmp;
            cur = tmp.next;
        }
        cur = head;
        while(cur != null){
            RandomListNode tmp = cur.next;
            if(cur.random != null)
                tmp.random = cur.random.next;
            cur = tmp.next;
        }
        
        cur = head;
        RandomListNode dup = head == null? null:head.next;
        while(cur != null){
            RandomListNode tmp = cur.next;
            cur.next = tmp.next;
            if(tmp.next != null)    
                tmp.next = tmp.next.next;
            cur = cur.next;
        }
        return dup;
    }
}