28. Implement strStr().

Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

Update (2014-11-02):
The signature of the function had been updated to return the index instead of the pointer. If you still see your function signature returns a char * or String, please click the reload button  to reset your code definition.

public class Solution {
    public int strStr(String haystack, String needle) {
        if(haystack.length() < needle.length()) return -1;
        if(needle.length() == 0)  return 0;
        for(int i = 0; i < haystack.length() - needle.length() + 1;i++){
            int j = 0;
            int tmp = i;
            for(; j < needle.length(); j++){
                if(needle.charAt(j) != haystack.charAt(tmp)){
                    break;
                }
                tmp++;
            }
            if(j == needle.length())    return i;
        }
        
        return -1;
    }
}

KMP:

public class Solution {
    public int strStr(String haystack, String needle) {
        if(haystack.length() < needle.length()) return -1;
        if(needle.length() == 0)  return 0;
        int[] pattern = new int[needle.length()+10];
        
        genPattern(needle, pattern);
        return match(haystack, needle, pattern);
    }
    
    public void genPattern(String str, int[] pattern){
        pattern[0] = -1;
        int k = -1;
        for(int j = 1; j < str.length(); j++){
            while(k>-1 && str.charAt(k+1)!=str.charAt(j))
                k = pattern[k];
            if(str.charAt(k+1) == str.charAt(j))
                k++;
            pattern[j] = k;
        }
    }
    
    int match(String haystack, String needle, int[] pattern){
        int k = -1;
        for(int j = 0; j < haystack.length(); j++){
            while(k> -1 && needle.charAt(k+1) != haystack.charAt(j))
                k = pattern[k];
            if(needle.charAt(k+1) == haystack.charAt(j))
                k++;
            if(k == needle.length() - 1)
                return j - k; 
        }
        return -1;
    }
}
